// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
#ifndef __BINDINGS_HOST_H
#define __BINDINGS_HOST_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct host_string_t {
  uint8_t*ptr;
  size_t len;
} host_string_t;

typedef struct foxglove_loader_reader_own_reader_t {
  int32_t __handle;
} foxglove_loader_reader_own_reader_t;

typedef struct foxglove_loader_reader_borrow_reader_t {
  int32_t __handle;
} foxglove_loader_reader_borrow_reader_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} host_list_u8_t;

typedef uint64_t foxglove_loader_time_time_nanos_t;

typedef struct foxglove_loader_time_time_range_t {
  foxglove_loader_time_time_nanos_t   start_time;
  foxglove_loader_time_time_nanos_t   end_time;
} foxglove_loader_time_time_range_t;

typedef foxglove_loader_time_time_nanos_t exports_foxglove_loader_loader_time_nanos_t;

typedef foxglove_loader_time_time_range_t exports_foxglove_loader_loader_time_range_t;

typedef uint16_t exports_foxglove_loader_loader_channel_id_t;

typedef uint16_t exports_foxglove_loader_loader_schema_id_t;

typedef host_string_t exports_foxglove_loader_loader_error_t;

typedef uint8_t exports_foxglove_loader_loader_severity_t;

#define EXPORTS_FOXGLOVE_LOADER_LOADER_SEVERITY_INFO 0
#define EXPORTS_FOXGLOVE_LOADER_LOADER_SEVERITY_WARN 1
#define EXPORTS_FOXGLOVE_LOADER_LOADER_SEVERITY_ERROR 2

typedef struct {
  bool is_some;
  host_string_t val;
} host_option_string_t;

typedef struct exports_foxglove_loader_loader_problem_t {
  // The severity of the problem. Currently "error", "warn" and "info" are supported.
  exports_foxglove_loader_loader_severity_t   severity;
  // The problem that occurred.
  host_string_t   message;
  // Optional context that can be  displayed to the user along side the problem.
  host_option_string_t   tip;
} exports_foxglove_loader_loader_problem_t;

typedef struct {
  exports_foxglove_loader_loader_channel_id_t *ptr;
  size_t len;
} host_list_channel_id_t;

typedef struct exports_foxglove_loader_loader_backfill_args_t {
  exports_foxglove_loader_loader_time_nanos_t   time;
  host_list_channel_id_t   channels;
} exports_foxglove_loader_loader_backfill_args_t;

typedef struct {
  bool is_some;
  exports_foxglove_loader_loader_time_nanos_t val;
} host_option_time_nanos_t;

typedef struct exports_foxglove_loader_loader_message_iterator_args_t {
  host_option_time_nanos_t   start_time;
  host_option_time_nanos_t   end_time;
  host_list_channel_id_t   channels;
} exports_foxglove_loader_loader_message_iterator_args_t;

typedef struct {
  bool is_some;
  exports_foxglove_loader_loader_schema_id_t val;
} host_option_schema_id_t;

typedef struct {
  bool is_some;
  uint64_t val;
} host_option_u64_t;

typedef struct exports_foxglove_loader_loader_channel_t {
  // A unique identifier for this channel within the file.
  exports_foxglove_loader_loader_channel_id_t   id;
  // The schema for messages on this channel.
  host_option_schema_id_t   schema_id;
  // The channel topic.
  host_string_t   topic_name;
  // Encoding for messages on this channel.
  host_string_t   message_encoding;
  // The number of messages on this channel.
  host_option_u64_t   message_count;
} exports_foxglove_loader_loader_channel_t;

typedef struct exports_foxglove_loader_loader_schema_t {
  // A unique identifier for this schema within the file. Must not be zero.
  exports_foxglove_loader_loader_schema_id_t   id;
  // An identifier for the schema.
  host_string_t   name;
  // Format for the schema. The well-known schema encodings are preferred. An empty string indicates no schema is available.
  host_string_t   encoding;
  // Must conform to the schema encoding. If encoding is an empty string, data should be 0 length.
  host_list_u8_t   data;
} exports_foxglove_loader_loader_schema_t;

typedef struct {
  exports_foxglove_loader_loader_channel_t *ptr;
  size_t len;
} exports_foxglove_loader_loader_list_channel_t;

typedef struct {
  exports_foxglove_loader_loader_schema_t *ptr;
  size_t len;
} exports_foxglove_loader_loader_list_schema_t;

typedef struct {
  exports_foxglove_loader_loader_problem_t *ptr;
  size_t len;
} exports_foxglove_loader_loader_list_problem_t;

typedef struct exports_foxglove_loader_loader_initialization_t {
  exports_foxglove_loader_loader_list_channel_t   channels;
  exports_foxglove_loader_loader_list_schema_t   schemas;
  exports_foxglove_loader_loader_time_range_t   time_range;
  exports_foxglove_loader_loader_list_problem_t   problems;
} exports_foxglove_loader_loader_initialization_t;

typedef struct exports_foxglove_loader_loader_message_t {
  exports_foxglove_loader_loader_channel_id_t   channel_id;
  // The timestamp in nanoseconds at which the message was recorded.
  exports_foxglove_loader_loader_time_nanos_t   log_time;
  // The timestamp in nanoseconds at which the message was published.
  // If not available, must be set to the log time.
  exports_foxglove_loader_loader_time_nanos_t   publish_time;
  host_list_u8_t   data;
} exports_foxglove_loader_loader_message_t;

typedef struct {
  host_string_t *ptr;
  size_t len;
} host_list_string_t;

typedef struct exports_foxglove_loader_loader_data_loader_args_t {
  host_list_string_t   paths;
} exports_foxglove_loader_loader_data_loader_args_t;

typedef struct exports_foxglove_loader_loader_own_message_iterator_t {
  int32_t __handle;
} exports_foxglove_loader_loader_own_message_iterator_t;

typedef struct exports_foxglove_loader_loader_message_iterator_t exports_foxglove_loader_loader_message_iterator_t;

typedef exports_foxglove_loader_loader_message_iterator_t* exports_foxglove_loader_loader_borrow_message_iterator_t;

typedef struct exports_foxglove_loader_loader_own_data_loader_t {
  int32_t __handle;
} exports_foxglove_loader_loader_own_data_loader_t;

typedef struct exports_foxglove_loader_loader_data_loader_t exports_foxglove_loader_loader_data_loader_t;

typedef exports_foxglove_loader_loader_data_loader_t* exports_foxglove_loader_loader_borrow_data_loader_t;

typedef struct {
  bool is_err;
  union {
    exports_foxglove_loader_loader_message_t ok;
    exports_foxglove_loader_loader_error_t err;
  } val;
} exports_foxglove_loader_loader_result_message_error_t;

typedef struct {
  bool is_some;
  exports_foxglove_loader_loader_result_message_error_t val;
} exports_foxglove_loader_loader_option_result_message_error_t;

typedef struct {
  bool is_err;
  union {
    exports_foxglove_loader_loader_initialization_t ok;
    exports_foxglove_loader_loader_error_t err;
  } val;
} exports_foxglove_loader_loader_result_initialization_error_t;

typedef struct {
  bool is_err;
  union {
    exports_foxglove_loader_loader_own_message_iterator_t ok;
    exports_foxglove_loader_loader_error_t err;
  } val;
} exports_foxglove_loader_loader_result_own_message_iterator_error_t;

typedef struct {
  exports_foxglove_loader_loader_message_t *ptr;
  size_t len;
} exports_foxglove_loader_loader_list_message_t;

typedef struct {
  bool is_err;
  union {
    exports_foxglove_loader_loader_list_message_t ok;
    exports_foxglove_loader_loader_error_t err;
  } val;
} exports_foxglove_loader_loader_result_list_message_error_t;

// Imported Functions from `foxglove:loader/console@0.1.0`
extern void foxglove_loader_console_log(host_string_t *log);
extern void foxglove_loader_console_error(host_string_t *log);
extern void foxglove_loader_console_warn(host_string_t *log);

// Imported Functions from `foxglove:loader/reader@0.1.0`
extern uint64_t foxglove_loader_reader_method_reader_seek(foxglove_loader_reader_borrow_reader_t self, uint64_t pos);
extern uint64_t foxglove_loader_reader_method_reader_position(foxglove_loader_reader_borrow_reader_t self);
extern uint64_t foxglove_loader_reader_method_reader_read(foxglove_loader_reader_borrow_reader_t self, host_list_u8_t *target);
extern uint64_t foxglove_loader_reader_method_reader_size(foxglove_loader_reader_borrow_reader_t self);
extern foxglove_loader_reader_own_reader_t foxglove_loader_reader_open(host_string_t *path);

// Exported Functions from `foxglove:loader/loader@0.1.0`
bool exports_foxglove_loader_loader_method_message_iterator_next(exports_foxglove_loader_loader_borrow_message_iterator_t self, exports_foxglove_loader_loader_result_message_error_t *ret);
exports_foxglove_loader_loader_own_data_loader_t exports_foxglove_loader_loader_constructor_data_loader(exports_foxglove_loader_loader_data_loader_args_t *args);
bool exports_foxglove_loader_loader_method_data_loader_initialize(exports_foxglove_loader_loader_borrow_data_loader_t self, exports_foxglove_loader_loader_initialization_t *ret, exports_foxglove_loader_loader_error_t *err);
bool exports_foxglove_loader_loader_method_data_loader_create_iterator(exports_foxglove_loader_loader_borrow_data_loader_t self, exports_foxglove_loader_loader_message_iterator_args_t *args, exports_foxglove_loader_loader_own_message_iterator_t *ret, exports_foxglove_loader_loader_error_t *err);
bool exports_foxglove_loader_loader_method_data_loader_get_backfill(exports_foxglove_loader_loader_borrow_data_loader_t self, exports_foxglove_loader_loader_backfill_args_t *args, exports_foxglove_loader_loader_list_message_t *ret, exports_foxglove_loader_loader_error_t *err);

// Helper Functions

extern void foxglove_loader_reader_reader_drop_own(foxglove_loader_reader_own_reader_t handle);

extern void foxglove_loader_reader_reader_drop_borrow(foxglove_loader_reader_borrow_reader_t handle);

extern foxglove_loader_reader_borrow_reader_t foxglove_loader_reader_borrow_reader(foxglove_loader_reader_own_reader_t handle);

void host_list_u8_free(host_list_u8_t *ptr);

void exports_foxglove_loader_loader_error_free(exports_foxglove_loader_loader_error_t *ptr);

void host_option_string_free(host_option_string_t *ptr);

void exports_foxglove_loader_loader_problem_free(exports_foxglove_loader_loader_problem_t *ptr);

void host_list_channel_id_free(host_list_channel_id_t *ptr);

void exports_foxglove_loader_loader_backfill_args_free(exports_foxglove_loader_loader_backfill_args_t *ptr);

void host_option_time_nanos_free(host_option_time_nanos_t *ptr);

void exports_foxglove_loader_loader_message_iterator_args_free(exports_foxglove_loader_loader_message_iterator_args_t *ptr);

void host_option_schema_id_free(host_option_schema_id_t *ptr);

void host_option_u64_free(host_option_u64_t *ptr);

void exports_foxglove_loader_loader_channel_free(exports_foxglove_loader_loader_channel_t *ptr);

void exports_foxglove_loader_loader_schema_free(exports_foxglove_loader_loader_schema_t *ptr);

void exports_foxglove_loader_loader_list_channel_free(exports_foxglove_loader_loader_list_channel_t *ptr);

void exports_foxglove_loader_loader_list_schema_free(exports_foxglove_loader_loader_list_schema_t *ptr);

void exports_foxglove_loader_loader_list_problem_free(exports_foxglove_loader_loader_list_problem_t *ptr);

void exports_foxglove_loader_loader_initialization_free(exports_foxglove_loader_loader_initialization_t *ptr);

void host_list_string_free(host_list_string_t *ptr);

void exports_foxglove_loader_loader_data_loader_args_free(exports_foxglove_loader_loader_data_loader_args_t *ptr);

extern void exports_foxglove_loader_loader_message_iterator_drop_own(exports_foxglove_loader_loader_own_message_iterator_t handle);

extern exports_foxglove_loader_loader_own_message_iterator_t exports_foxglove_loader_loader_message_iterator_new(exports_foxglove_loader_loader_message_iterator_t *rep);
extern exports_foxglove_loader_loader_message_iterator_t* exports_foxglove_loader_loader_message_iterator_rep(exports_foxglove_loader_loader_own_message_iterator_t handle);
void exports_foxglove_loader_loader_message_iterator_destructor(exports_foxglove_loader_loader_message_iterator_t *rep);

extern void exports_foxglove_loader_loader_data_loader_drop_own(exports_foxglove_loader_loader_own_data_loader_t handle);

extern exports_foxglove_loader_loader_own_data_loader_t exports_foxglove_loader_loader_data_loader_new(exports_foxglove_loader_loader_data_loader_t *rep);
extern exports_foxglove_loader_loader_data_loader_t* exports_foxglove_loader_loader_data_loader_rep(exports_foxglove_loader_loader_own_data_loader_t handle);
void exports_foxglove_loader_loader_data_loader_destructor(exports_foxglove_loader_loader_data_loader_t *rep);

void exports_foxglove_loader_loader_result_message_error_free(exports_foxglove_loader_loader_result_message_error_t *ptr);

void exports_foxglove_loader_loader_option_result_message_error_free(exports_foxglove_loader_loader_option_result_message_error_t *ptr);

void exports_foxglove_loader_loader_result_initialization_error_free(exports_foxglove_loader_loader_result_initialization_error_t *ptr);

void exports_foxglove_loader_loader_result_own_message_iterator_error_free(exports_foxglove_loader_loader_result_own_message_iterator_error_t *ptr);

void exports_foxglove_loader_loader_list_message_free(exports_foxglove_loader_loader_list_message_t *ptr);

void exports_foxglove_loader_loader_result_list_message_error_free(exports_foxglove_loader_loader_result_list_message_error_t *ptr);

// Sets the string `ret` to reference the input string `s` without copying it
void host_string_set(host_string_t *ret, const char*s);

// Copies the `src` string to a new allocation in `dst`.
void host_string_clone(host_string_t *dst, host_string_t *src);

// Creates a copy of the input nul-terminated string `s` and
// stores it into the component model string `ret`.
void host_string_dup(host_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void host_string_free(host_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
