# Generated by https://github.com/foxglove/foxglove-sdk
from enum import Enum
from typing import Union

from . import Schema
from .schemas_wkt import Duration as Duration
from .schemas_wkt import Timestamp as Timestamp

#
# Enums
#

class LinePrimitiveLineType(Enum):
    """
    An enumeration indicating how input points should be interpreted to create lines
    """

    LineStrip = 0
    LineLoop = 1
    LineList = 2

class LocationFixPositionCovarianceType(Enum):
    """
    Type of position covariance
    """

    Unknown = 0
    Approximated = 1
    DiagonalKnown = 2
    Known = 3

class LogLevel(Enum):
    """
    Log level
    """

    Unknown = 0
    Debug = 1
    Info = 2
    Warning = 3
    Error = 4
    Fatal = 5

class PackedElementFieldNumericType(Enum):
    """
    Numeric type
    """

    Unknown = 0
    Uint8 = 1
    Int8 = 2
    Uint16 = 3
    Int16 = 4
    Uint32 = 5
    Int32 = 6
    Float32 = 7
    Float64 = 8

class PointsAnnotationType(Enum):
    """
    Type of points annotation
    """

    Unknown = 0
    Points = 1
    LineLoop = 2
    LineStrip = 3
    LineList = 4

class SceneEntityDeletionType(Enum):
    """
    An enumeration indicating which entities should match a SceneEntityDeletion command
    """

    MatchingId = 0
    All = 1

#
# Classes
#

class ArrowPrimitive:
    """
    A primitive representing an arrow
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        shaft_length: float = 0.0,
        shaft_diameter: float = 0.0,
        head_length: float = 0.0,
        head_diameter: float = 0.0,
        color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the ArrowPrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the ArrowPrimitive."""
        ...

class CameraCalibration:
    """
    Camera calibration parameters
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        width: int = 0,
        height: int = 0,
        distortion_model: str = "",
        D: list[float] | None = None,
        K: list[float] | None = None,
        R: list[float] | None = None,
        P: list[float] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CameraCalibration schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CameraCalibration."""
        ...

class CircleAnnotation:
    """
    A circle annotation on a 2D image
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        position: Point2 | None = None,
        diameter: float = 0.0,
        thickness: float = 0.0,
        fill_color: Color | None = None,
        outline_color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CircleAnnotation schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CircleAnnotation."""
        ...

class Color:
    """
    A color in RGBA format
    """

    def __init__(
        self, *, r: float = 0.0, g: float = 0.0, b: float = 0.0, a: float = 0.0
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Color schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Color."""
        ...

class CompressedImage:
    """
    A compressed image
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        data: bytes = b"",
        format: str = "",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CompressedImage schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CompressedImage."""
        ...

class CompressedVideo:
    """
    A single frame of a compressed video bitstream
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        data: bytes = b"",
        format: str = "",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CompressedVideo schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CompressedVideo."""
        ...

class CubePrimitive:
    """
    A primitive representing a cube or rectangular prism
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        size: Vector3 | None = None,
        color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CubePrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CubePrimitive."""
        ...

class CylinderPrimitive:
    """
    A primitive representing a cylinder, elliptic cylinder, or truncated cone
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        size: Vector3 | None = None,
        bottom_scale: float = 0.0,
        top_scale: float = 0.0,
        color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the CylinderPrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the CylinderPrimitive."""
        ...

class FrameTransform:
    """
    A transform between two reference frames in 3D space
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        parent_frame_id: str = "",
        child_frame_id: str = "",
        translation: Vector3 | None = None,
        rotation: Quaternion | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the FrameTransform schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the FrameTransform."""
        ...

class FrameTransforms:
    """
    An array of FrameTransform messages
    """

    def __init__(self, *, transforms: list[FrameTransform] | None = None) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the FrameTransforms schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the FrameTransforms."""
        ...

class GeoJson:
    """
    GeoJSON data for annotating maps
    """

    def __init__(self, *, geojson: str = "") -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the GeoJson schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the GeoJson."""
        ...

class Grid:
    """
    A 2D grid of data
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        pose: Pose | None = None,
        column_count: int = 0,
        cell_size: Vector2 | None = None,
        row_stride: int = 0,
        cell_stride: int = 0,
        fields: list[PackedElementField] | None = None,
        data: bytes = b"",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Grid schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Grid."""
        ...

class ImageAnnotations:
    """
    Array of annotations for a 2D image
    """

    def __init__(
        self,
        *,
        circles: list[CircleAnnotation] | None = None,
        points: list[PointsAnnotation] | None = None,
        texts: list[TextAnnotation] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the ImageAnnotations schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the ImageAnnotations."""
        ...

class KeyValuePair:
    """
    A key with its associated value
    """

    def __init__(self, *, key: str = "", value: str = "") -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the KeyValuePair schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the KeyValuePair."""
        ...

class LaserScan:
    """
    A single scan from a planar laser range-finder
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        pose: Pose | None = None,
        start_angle: float = 0.0,
        end_angle: float = 0.0,
        ranges: list[float] | None = None,
        intensities: list[float] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the LaserScan schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the LaserScan."""
        ...

class LinePrimitive:
    """
    A primitive representing a series of points connected by lines
    """

    def __init__(
        self,
        *,
        type: LinePrimitiveLineType = LinePrimitiveLineType.LineStrip,
        pose: Pose | None = None,
        thickness: float = 0.0,
        scale_invariant: bool = False,
        points: list[Point3] | None = None,
        color: Color | None = None,
        colors: list[Color] | None = None,
        indices: list[int] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the LinePrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the LinePrimitive."""
        ...

class LocationFix:
    """
    A navigation satellite fix for any Global Navigation Satellite System
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        latitude: float = 0.0,
        longitude: float = 0.0,
        altitude: float = 0.0,
        position_covariance: list[float] | None = None,
        position_covariance_type: LocationFixPositionCovarianceType = LocationFixPositionCovarianceType.Unknown,
        color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the LocationFix schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the LocationFix."""
        ...

class LocationFixes:
    """
    A group of LocationFix messages
    """

    def __init__(self, *, fixes: list[LocationFix] | None = None) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the LocationFixes schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the LocationFixes."""
        ...

class Log:
    """
    A log message
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        level: LogLevel = LogLevel.Unknown,
        message: str = "",
        name: str = "",
        file: str = "",
        line: int = 0,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Log schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Log."""
        ...

class ModelPrimitive:
    """
    A primitive representing a 3D model file loaded from an external URL or embedded data
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        scale: Vector3 | None = None,
        color: Color | None = None,
        override_color: bool = False,
        url: str = "",
        media_type: str = "",
        data: bytes = b"",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the ModelPrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the ModelPrimitive."""
        ...

class PackedElementField:
    """
    A field present within each element in a byte array of packed elements.
    """

    def __init__(
        self,
        *,
        name: str = "",
        offset: int = 0,
        type: PackedElementFieldNumericType = PackedElementFieldNumericType.Unknown,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the PackedElementField schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the PackedElementField."""
        ...

class Point2:
    """
    A point representing a position in 2D space
    """

    def __init__(self, *, x: float = 0.0, y: float = 0.0) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Point2 schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Point2."""
        ...

class Point3:
    """
    A point representing a position in 3D space
    """

    def __init__(self, *, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Point3 schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Point3."""
        ...

class PointCloud:
    """
    A collection of N-dimensional points, which may contain additional fields with information like normals, intensity, etc.
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        pose: Pose | None = None,
        point_stride: int = 0,
        fields: list[PackedElementField] | None = None,
        data: bytes = b"",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the PointCloud schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the PointCloud."""
        ...

class PointsAnnotation:
    """
    An array of points on a 2D image
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        type: PointsAnnotationType = PointsAnnotationType.Unknown,
        points: list[Point2] | None = None,
        outline_color: Color | None = None,
        outline_colors: list[Color] | None = None,
        fill_color: Color | None = None,
        thickness: float = 0.0,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the PointsAnnotation schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the PointsAnnotation."""
        ...

class Pose:
    """
    A position and orientation for an object or reference frame in 3D space
    """

    def __init__(
        self, *, position: Vector3 | None = None, orientation: Quaternion | None = None
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Pose schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Pose."""
        ...

class PoseInFrame:
    """
    A timestamped pose for an object or reference frame in 3D space
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        pose: Pose | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the PoseInFrame schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the PoseInFrame."""
        ...

class PosesInFrame:
    """
    An array of timestamped poses for an object or reference frame in 3D space
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        poses: list[Pose] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the PosesInFrame schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the PosesInFrame."""
        ...

class Quaternion:
    """
    A [quaternion](https://eater.net/quaternions) representing a rotation in 3D space
    """

    def __init__(
        self, *, x: float = 0.0, y: float = 0.0, z: float = 0.0, w: float = 0.0
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Quaternion schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Quaternion."""
        ...

class RawAudio:
    """
    A single block of an audio bitstream
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        data: bytes = b"",
        format: str = "",
        sample_rate: int = 0,
        number_of_channels: int = 0,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the RawAudio schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the RawAudio."""
        ...

class RawImage:
    """
    A raw image
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        width: int = 0,
        height: int = 0,
        encoding: str = "",
        step: int = 0,
        data: bytes = b"",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the RawImage schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the RawImage."""
        ...

class SceneEntity:
    """
    A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference.
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        id: str = "",
        lifetime: Duration | None = None,
        frame_locked: bool = False,
        metadata: list[KeyValuePair] | None = None,
        arrows: list[ArrowPrimitive] | None = None,
        cubes: list[CubePrimitive] | None = None,
        spheres: list[SpherePrimitive] | None = None,
        cylinders: list[CylinderPrimitive] | None = None,
        lines: list[LinePrimitive] | None = None,
        triangles: list[TriangleListPrimitive] | None = None,
        texts: list[TextPrimitive] | None = None,
        models: list[ModelPrimitive] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the SceneEntity schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the SceneEntity."""
        ...

class SceneEntityDeletion:
    """
    Command to remove previously published entities
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        type: SceneEntityDeletionType = SceneEntityDeletionType.MatchingId,
        id: str = "",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the SceneEntityDeletion schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the SceneEntityDeletion."""
        ...

class SceneUpdate:
    """
    An update to the entities displayed in a 3D scene
    """

    def __init__(
        self,
        *,
        deletions: list[SceneEntityDeletion] | None = None,
        entities: list[SceneEntity] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the SceneUpdate schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the SceneUpdate."""
        ...

class SpherePrimitive:
    """
    A primitive representing a sphere or ellipsoid
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        size: Vector3 | None = None,
        color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the SpherePrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the SpherePrimitive."""
        ...

class TextAnnotation:
    """
    A text label on a 2D image
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        position: Point2 | None = None,
        text: str = "",
        font_size: float = 0.0,
        text_color: Color | None = None,
        background_color: Color | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the TextAnnotation schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the TextAnnotation."""
        ...

class TextPrimitive:
    """
    A primitive representing a text label
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        billboard: bool = False,
        font_size: float = 0.0,
        scale_invariant: bool = False,
        color: Color | None = None,
        text: str = "",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the TextPrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the TextPrimitive."""
        ...

class TriangleListPrimitive:
    """
    A primitive representing a set of triangles or a surface tiled by triangles
    """

    def __init__(
        self,
        *,
        pose: Pose | None = None,
        points: list[Point3] | None = None,
        color: Color | None = None,
        colors: list[Color] | None = None,
        indices: list[int] | None = None,
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the TriangleListPrimitive schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the TriangleListPrimitive."""
        ...

class Vector2:
    """
    A vector in 2D space that represents a direction only
    """

    def __init__(self, *, x: float = 0.0, y: float = 0.0) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Vector2 schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Vector2."""
        ...

class Vector3:
    """
    A vector in 3D space that represents a direction only
    """

    def __init__(self, *, x: float = 0.0, y: float = 0.0, z: float = 0.0) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the Vector3 schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the Vector3."""
        ...

class VoxelGrid:
    """
    A 3D grid of data
    """

    def __init__(
        self,
        *,
        timestamp: Timestamp | None = None,
        frame_id: str = "",
        pose: Pose | None = None,
        row_count: int = 0,
        column_count: int = 0,
        cell_size: Vector3 | None = None,
        slice_stride: int = 0,
        row_stride: int = 0,
        cell_stride: int = 0,
        fields: list[PackedElementField] | None = None,
        data: bytes = b"",
    ) -> None: ...
    @staticmethod
    def get_schema() -> Schema:
        """Returns the VoxelGrid schema"""
        ...

    def encode(self) -> bytes:
        """Encodes the VoxelGrid."""
        ...

FoxgloveSchema = Union[
    ArrowPrimitive,
    CameraCalibration,
    CircleAnnotation,
    Color,
    CompressedImage,
    CompressedVideo,
    CylinderPrimitive,
    CubePrimitive,
    FrameTransform,
    FrameTransforms,
    GeoJson,
    Grid,
    VoxelGrid,
    ImageAnnotations,
    KeyValuePair,
    LaserScan,
    LinePrimitive,
    LocationFix,
    LocationFixes,
    Log,
    SceneEntityDeletion,
    SceneEntity,
    SceneUpdate,
    ModelPrimitive,
    PackedElementField,
    Point2,
    Point3,
    PointCloud,
    PointsAnnotation,
    Pose,
    PoseInFrame,
    PosesInFrame,
    Quaternion,
    RawAudio,
    RawImage,
    SpherePrimitive,
    TextAnnotation,
    TextPrimitive,
    TriangleListPrimitive,
    Vector2,
    Vector3,
]
