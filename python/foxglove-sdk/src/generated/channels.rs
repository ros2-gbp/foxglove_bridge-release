//! Typed channels for logging Foxglove schemas
//! Generated by https://github.com/foxglove/foxglove-sdk

use super::schemas;
use crate::{PyContext, PySchema};
use foxglove::{Channel, ChannelBuilder, PartialMetadata, SinkId};
use pyo3::prelude::*;
use pyo3::types::PyDict;
use std::collections::BTreeMap;
use std::num::NonZero;

pub fn register_submodule(parent_module: &Bound<'_, PyModule>) -> PyResult<()> {
    let module = PyModule::new(parent_module.py(), "channels")?;

    module.add_class::<ArrowPrimitiveChannel>()?;
    module.add_class::<CameraCalibrationChannel>()?;
    module.add_class::<CircleAnnotationChannel>()?;
    module.add_class::<ColorChannel>()?;
    module.add_class::<CompressedImageChannel>()?;
    module.add_class::<CompressedVideoChannel>()?;
    module.add_class::<CylinderPrimitiveChannel>()?;
    module.add_class::<CubePrimitiveChannel>()?;
    module.add_class::<FrameTransformChannel>()?;
    module.add_class::<FrameTransformsChannel>()?;
    module.add_class::<GeoJsonChannel>()?;
    module.add_class::<GridChannel>()?;
    module.add_class::<VoxelGridChannel>()?;
    module.add_class::<ImageAnnotationsChannel>()?;
    module.add_class::<KeyValuePairChannel>()?;
    module.add_class::<LaserScanChannel>()?;
    module.add_class::<LinePrimitiveChannel>()?;
    module.add_class::<LocationFixChannel>()?;
    module.add_class::<LocationFixesChannel>()?;
    module.add_class::<LogChannel>()?;
    module.add_class::<SceneEntityDeletionChannel>()?;
    module.add_class::<SceneEntityChannel>()?;
    module.add_class::<SceneUpdateChannel>()?;
    module.add_class::<ModelPrimitiveChannel>()?;
    module.add_class::<PackedElementFieldChannel>()?;
    module.add_class::<Point2Channel>()?;
    module.add_class::<Point3Channel>()?;
    module.add_class::<PointCloudChannel>()?;
    module.add_class::<PointsAnnotationChannel>()?;
    module.add_class::<PoseChannel>()?;
    module.add_class::<PoseInFrameChannel>()?;
    module.add_class::<PosesInFrameChannel>()?;
    module.add_class::<QuaternionChannel>()?;
    module.add_class::<RawAudioChannel>()?;
    module.add_class::<RawImageChannel>()?;
    module.add_class::<SpherePrimitiveChannel>()?;
    module.add_class::<TextAnnotationChannel>()?;
    module.add_class::<TextPrimitiveChannel>()?;
    module.add_class::<TriangleListPrimitiveChannel>()?;
    module.add_class::<Vector2Channel>()?;
    module.add_class::<Vector3Channel>()?;

    // Define as a package
    // https://github.com/PyO3/pyo3/issues/759
    let py = parent_module.py();
    py.import("sys")?
        .getattr("modules")?
        .set_item("foxglove._foxglove_py.channels", &module)?;

    parent_module.add_submodule(&module)
}

/// A channel for logging :py:class:`foxglove.schemas.ArrowPrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct ArrowPrimitiveChannel(Channel<foxglove::schemas::ArrowPrimitive>);

#[pymethods]
impl ArrowPrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.ArrowPrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::ArrowPrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "ArrowPrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CameraCalibration` messages.
#[pyclass(module = "foxglove.channels")]
struct CameraCalibrationChannel(Channel<foxglove::schemas::CameraCalibration>);

#[pymethods]
impl CameraCalibrationChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CameraCalibration` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CameraCalibration, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CameraCalibrationChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CircleAnnotation` messages.
#[pyclass(module = "foxglove.channels")]
struct CircleAnnotationChannel(Channel<foxglove::schemas::CircleAnnotation>);

#[pymethods]
impl CircleAnnotationChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CircleAnnotation` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CircleAnnotation, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CircleAnnotationChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Color` messages.
#[pyclass(module = "foxglove.channels")]
struct ColorChannel(Channel<foxglove::schemas::Color>);

#[pymethods]
impl ColorChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Color` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Color, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("ColorChannel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CompressedImage` messages.
#[pyclass(module = "foxglove.channels")]
struct CompressedImageChannel(Channel<foxglove::schemas::CompressedImage>);

#[pymethods]
impl CompressedImageChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CompressedImage` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CompressedImage, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CompressedImageChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CompressedVideo` messages.
#[pyclass(module = "foxglove.channels")]
struct CompressedVideoChannel(Channel<foxglove::schemas::CompressedVideo>);

#[pymethods]
impl CompressedVideoChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CompressedVideo` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CompressedVideo, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CompressedVideoChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CylinderPrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct CylinderPrimitiveChannel(Channel<foxglove::schemas::CylinderPrimitive>);

#[pymethods]
impl CylinderPrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CylinderPrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CylinderPrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CylinderPrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.CubePrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct CubePrimitiveChannel(Channel<foxglove::schemas::CubePrimitive>);

#[pymethods]
impl CubePrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.CubePrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::CubePrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "CubePrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.FrameTransform` messages.
#[pyclass(module = "foxglove.channels")]
struct FrameTransformChannel(Channel<foxglove::schemas::FrameTransform>);

#[pymethods]
impl FrameTransformChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.FrameTransform` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::FrameTransform, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "FrameTransformChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.FrameTransforms` messages.
#[pyclass(module = "foxglove.channels")]
struct FrameTransformsChannel(Channel<foxglove::schemas::FrameTransforms>);

#[pymethods]
impl FrameTransformsChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.FrameTransforms` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::FrameTransforms, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "FrameTransformsChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.GeoJson` messages.
#[pyclass(module = "foxglove.channels")]
struct GeoJsonChannel(Channel<foxglove::schemas::GeoJson>);

#[pymethods]
impl GeoJsonChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.GeoJson` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::GeoJson, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("GeoJsonChannel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Grid` messages.
#[pyclass(module = "foxglove.channels")]
struct GridChannel(Channel<foxglove::schemas::Grid>);

#[pymethods]
impl GridChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Grid` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Grid, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("GridChannel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.VoxelGrid` messages.
#[pyclass(module = "foxglove.channels")]
struct VoxelGridChannel(Channel<foxglove::schemas::VoxelGrid>);

#[pymethods]
impl VoxelGridChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.VoxelGrid` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::VoxelGrid, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "VoxelGridChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.ImageAnnotations` messages.
#[pyclass(module = "foxglove.channels")]
struct ImageAnnotationsChannel(Channel<foxglove::schemas::ImageAnnotations>);

#[pymethods]
impl ImageAnnotationsChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.ImageAnnotations` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::ImageAnnotations, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "ImageAnnotationsChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.KeyValuePair` messages.
#[pyclass(module = "foxglove.channels")]
struct KeyValuePairChannel(Channel<foxglove::schemas::KeyValuePair>);

#[pymethods]
impl KeyValuePairChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.KeyValuePair` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::KeyValuePair, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "KeyValuePairChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.LaserScan` messages.
#[pyclass(module = "foxglove.channels")]
struct LaserScanChannel(Channel<foxglove::schemas::LaserScan>);

#[pymethods]
impl LaserScanChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.LaserScan` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::LaserScan, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "LaserScanChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.LinePrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct LinePrimitiveChannel(Channel<foxglove::schemas::LinePrimitive>);

#[pymethods]
impl LinePrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.LinePrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::LinePrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "LinePrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.LocationFix` messages.
#[pyclass(module = "foxglove.channels")]
struct LocationFixChannel(Channel<foxglove::schemas::LocationFix>);

#[pymethods]
impl LocationFixChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.LocationFix` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::LocationFix, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "LocationFixChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.LocationFixes` messages.
#[pyclass(module = "foxglove.channels")]
struct LocationFixesChannel(Channel<foxglove::schemas::LocationFixes>);

#[pymethods]
impl LocationFixesChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.LocationFixes` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::LocationFixes, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "LocationFixesChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Log` messages.
#[pyclass(module = "foxglove.channels")]
struct LogChannel(Channel<foxglove::schemas::Log>);

#[pymethods]
impl LogChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Log` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Log, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("LogChannel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.SceneEntityDeletion` messages.
#[pyclass(module = "foxglove.channels")]
struct SceneEntityDeletionChannel(Channel<foxglove::schemas::SceneEntityDeletion>);

#[pymethods]
impl SceneEntityDeletionChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.SceneEntityDeletion` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::SceneEntityDeletion, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "SceneEntityDeletionChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.SceneEntity` messages.
#[pyclass(module = "foxglove.channels")]
struct SceneEntityChannel(Channel<foxglove::schemas::SceneEntity>);

#[pymethods]
impl SceneEntityChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.SceneEntity` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::SceneEntity, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "SceneEntityChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.SceneUpdate` messages.
#[pyclass(module = "foxglove.channels")]
struct SceneUpdateChannel(Channel<foxglove::schemas::SceneUpdate>);

#[pymethods]
impl SceneUpdateChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.SceneUpdate` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::SceneUpdate, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "SceneUpdateChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.ModelPrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct ModelPrimitiveChannel(Channel<foxglove::schemas::ModelPrimitive>);

#[pymethods]
impl ModelPrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.ModelPrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::ModelPrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "ModelPrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.PackedElementField` messages.
#[pyclass(module = "foxglove.channels")]
struct PackedElementFieldChannel(Channel<foxglove::schemas::PackedElementField>);

#[pymethods]
impl PackedElementFieldChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.PackedElementField` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::PackedElementField, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "PackedElementFieldChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Point2` messages.
#[pyclass(module = "foxglove.channels")]
struct Point2Channel(Channel<foxglove::schemas::Point2>);

#[pymethods]
impl Point2Channel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Point2` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Point2, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("Point2Channel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Point3` messages.
#[pyclass(module = "foxglove.channels")]
struct Point3Channel(Channel<foxglove::schemas::Point3>);

#[pymethods]
impl Point3Channel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Point3` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Point3, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("Point3Channel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.PointCloud` messages.
#[pyclass(module = "foxglove.channels")]
struct PointCloudChannel(Channel<foxglove::schemas::PointCloud>);

#[pymethods]
impl PointCloudChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.PointCloud` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::PointCloud, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "PointCloudChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.PointsAnnotation` messages.
#[pyclass(module = "foxglove.channels")]
struct PointsAnnotationChannel(Channel<foxglove::schemas::PointsAnnotation>);

#[pymethods]
impl PointsAnnotationChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.PointsAnnotation` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::PointsAnnotation, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "PointsAnnotationChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Pose` messages.
#[pyclass(module = "foxglove.channels")]
struct PoseChannel(Channel<foxglove::schemas::Pose>);

#[pymethods]
impl PoseChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Pose` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Pose, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("PoseChannel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.PoseInFrame` messages.
#[pyclass(module = "foxglove.channels")]
struct PoseInFrameChannel(Channel<foxglove::schemas::PoseInFrame>);

#[pymethods]
impl PoseInFrameChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.PoseInFrame` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::PoseInFrame, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "PoseInFrameChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.PosesInFrame` messages.
#[pyclass(module = "foxglove.channels")]
struct PosesInFrameChannel(Channel<foxglove::schemas::PosesInFrame>);

#[pymethods]
impl PosesInFrameChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.PosesInFrame` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::PosesInFrame, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "PosesInFrameChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Quaternion` messages.
#[pyclass(module = "foxglove.channels")]
struct QuaternionChannel(Channel<foxglove::schemas::Quaternion>);

#[pymethods]
impl QuaternionChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Quaternion` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Quaternion, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "QuaternionChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.RawAudio` messages.
#[pyclass(module = "foxglove.channels")]
struct RawAudioChannel(Channel<foxglove::schemas::RawAudio>);

#[pymethods]
impl RawAudioChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.RawAudio` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::RawAudio, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "RawAudioChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.RawImage` messages.
#[pyclass(module = "foxglove.channels")]
struct RawImageChannel(Channel<foxglove::schemas::RawImage>);

#[pymethods]
impl RawImageChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.RawImage` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::RawImage, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "RawImageChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.SpherePrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct SpherePrimitiveChannel(Channel<foxglove::schemas::SpherePrimitive>);

#[pymethods]
impl SpherePrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.SpherePrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::SpherePrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "SpherePrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.TextAnnotation` messages.
#[pyclass(module = "foxglove.channels")]
struct TextAnnotationChannel(Channel<foxglove::schemas::TextAnnotation>);

#[pymethods]
impl TextAnnotationChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.TextAnnotation` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::TextAnnotation, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "TextAnnotationChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.TextPrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct TextPrimitiveChannel(Channel<foxglove::schemas::TextPrimitive>);

#[pymethods]
impl TextPrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.TextPrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::TextPrimitive, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "TextPrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.TriangleListPrimitive` messages.
#[pyclass(module = "foxglove.channels")]
struct TriangleListPrimitiveChannel(Channel<foxglove::schemas::TriangleListPrimitive>);

#[pymethods]
impl TriangleListPrimitiveChannel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.TriangleListPrimitive` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(
        &self,
        msg: &schemas::TriangleListPrimitive,
        log_time: Option<u64>,
        sink_id: Option<u64>,
    ) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!(
            "TriangleListPrimitiveChannel(id={}, topic='{}')",
            self.id(),
            self.topic()
        )
        .to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Vector2` messages.
#[pyclass(module = "foxglove.channels")]
struct Vector2Channel(Channel<foxglove::schemas::Vector2>);

#[pymethods]
impl Vector2Channel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Vector2` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Vector2, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("Vector2Channel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}

/// A channel for logging :py:class:`foxglove.schemas.Vector3` messages.
#[pyclass(module = "foxglove.channels")]
struct Vector3Channel(Channel<foxglove::schemas::Vector3>);

#[pymethods]
impl Vector3Channel {
    /// Create a new channel.
    ///
    /// :param topic: The topic to log messages to. You should choose a unique topic name per channel.
    /// :param metadata: A dictionary of key/value strings to add to the channel.
    ///     A type error is raised if any key or value is not a string.
    #[new]
    #[pyo3(signature = (topic, *, metadata=None, context=None))]
    fn new(
        topic: &str,
        metadata: Option<BTreeMap<String, String>>,
        context: Option<&PyContext>,
    ) -> Self {
        let builder = ChannelBuilder::new(topic).metadata(metadata.unwrap_or_default());
        let builder = if let Some(context) = context {
            builder.context(&context.0.clone())
        } else {
            builder
        };
        let base = builder.build();
        Self(base)
    }

    /// The unique ID of the channel.
    fn id(&self) -> u64 {
        self.0.id().into()
    }

    /// The topic name of the channel.
    fn topic(&self) -> &str {
        self.0.topic()
    }

    /// The message encoding for the channel.
    #[getter]
    fn message_encoding(&self) -> &str {
        self.0.message_encoding()
    }

    /// Returns a copy of the channel's metadata.
    ///
    /// Note that changes made to the returned dictionary will not be applied to
    /// the channel's metadata.
    fn metadata(&self, py: Python<'_>) -> PyResult<PyObject> {
        let dict = PyDict::new(py);
        for (key, value) in self.0.metadata() {
            dict.set_item(key, value)?;
        }
        Ok(dict.into())
    }

    /// Returns a copy of the channel's schema.
    ///
    /// Note that changes made to the returned object will not be applied to
    /// the channel's schema.
    fn schema(&self) -> Option<PySchema> {
        self.0.schema().cloned().map(PySchema::from)
    }

    /// The name of the schema for the channel.
    fn schema_name(&self) -> Option<&str> {
        Some(self.0.schema()?.name.as_str())
    }

    /// Returns true if at least one sink is subscribed to this channel.
    fn has_sinks(&self) -> bool {
        self.0.has_sinks()
    }

    /// Close the channel.
    ///
    /// You can use this to explicitly unadvertise the channel to sinks that subscribe to
    /// channels dynamically, such as the :py:class:`foxglove.websocket.WebSocketServer`.
    ///
    /// Attempts to log on a closed channel will elicit a throttled warning message.
    fn close(&mut self) {
        self.0.close();
    }

    /// Log a :py:class:`foxglove.schemas.Vector3` message to the channel.
    ///
    /// :param msg: The message to log.
    /// :param log_time: The log time is the time, as nanoseconds from the unix epoch, that the
    ///     message was recorded. Usually this is the time log() is called. If omitted, the
    ///     current time is used.
    /// :param sink_id: The ID of the sink to log to. If omitted, the message is logged to all sinks.
    #[pyo3(signature = (msg, *, log_time=None, sink_id=None))]
    fn log(&self, msg: &schemas::Vector3, log_time: Option<u64>, sink_id: Option<u64>) {
        let metadata = PartialMetadata { log_time };
        let sink_id = sink_id.and_then(NonZero::new).map(SinkId::new);

        self.0.log_with_meta_to_sink(&msg.0, metadata, sink_id);
    }

    fn __repr__(&self) -> String {
        format!("Vector3Channel(id={}, topic='{}')", self.id(), self.topic()).to_string()
    }
}
