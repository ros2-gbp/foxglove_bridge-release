import { generateSchemaPrelude, generatePyclass } from "./generatePyclass";
import { exampleEnum, exampleMessage } from "./testFixtures";

describe("generatePyclass", () => {
  it("generates module header", () => {
    expect(generateSchemaPrelude()).toMatchInlineSnapshot(`
     "//! Definitions for well-known Foxglove schemas
     //! Generated by https://github.com/foxglove/foxglove-sdk
     #![allow(clippy::too_many_arguments)]
     #![allow(clippy::enum_variant_names)]
     #![allow(non_snake_case)]
     use crate::PySchema;
     use crate::schemas_wkt::{Duration, Timestamp};
     use bytes::Bytes;
     use foxglove::Encode;
     use pyo3::prelude::*;
     use pyo3::types::PyBytes;

     "
    `);
  });

  it("generates an enum", () => {
    expect(generatePyclass(exampleEnum)).toMatchInlineSnapshot(`
        "/// An example enum
        #[pyclass(eq, eq_int, module = "foxglove.schemas")]
        #[derive(PartialEq, Clone)]
        pub(crate) enum ExampleMessageExampleEnum {
            A = 0,
            B = 1,
        }

        "
        `);
  });

  it("generates a struct from a message", () => {
    expect(generatePyclass(exampleMessage)).toMatchInlineSnapshot(`
     "/// An example type
     ///
     /// :param field_duration: duration field
     /// :param field_time: time field
     /// :param field_boolean: boolean field
     /// :param field_bytes: bytes field
     /// :param field_float64: float64 field
     /// :param field_uint32: uint32 field
     /// :param field_string: string field
     /// :param field_duration_array: duration array field
     /// :param field_time_array: time array field
     /// :param field_boolean_array: boolean array field
     /// :param field_bytes_array: bytes array field
     /// :param field_float64_array: float64 array field
     /// :param field_uint32_array: uint32 array field
     /// :param field_string_array: string array field
     /// :param field_duration_fixed_array: duration fixed-length array field
     /// :param field_time_fixed_array: time fixed-length array field
     /// :param field_boolean_fixed_array: boolean fixed-length array field
     /// :param field_bytes_fixed_array: bytes fixed-length array field
     /// :param field_float64_fixed_array: float64 fixed-length array field
     /// :param field_uint32_fixed_array: uint32 fixed-length array field
     /// :param field_string_fixed_array: string fixed-length array field
     /// :param field_enum: An enum field
     /// :param field_enum_array: An enum array field
     /// :param field_nested: A nested field
     /// :param field_nested_array: A nested array field
     ///     With
     ///     a
     ///     very
     ///     long
     ///     description
     ///
     /// See https://docs.foxglove.dev/docs/visualization/message-schemas/example-message
     #[pyclass(module = "foxglove.schemas")]
     #[derive(Clone)]
     pub(crate) struct ExampleMessage(pub(crate) foxglove::schemas::ExampleMessage);
     #[pymethods]
     impl ExampleMessage {
         #[new]
         #[pyo3(signature = (*, field_duration=None, field_time=None, field_boolean=false, field_bytes=None, field_float64=0.0, field_uint32=0, field_string="", field_duration_array=None, field_time_array=None, field_boolean_array=None, field_bytes_array=None, field_float64_array=None, field_uint32_array=None, field_string_array=None, field_duration_fixed_array=None, field_time_fixed_array=None, field_boolean_fixed_array=None, field_bytes_fixed_array=None, field_float64_fixed_array=None, field_uint32_fixed_array=None, field_string_fixed_array=None, field_enum=ExampleMessageExampleEnum::A, field_enum_array=None, field_nested=None, field_nested_array=None) )]
         fn new(
             field_duration: Option<Duration>,
             field_time: Option<Timestamp>,
             field_boolean: bool,
             field_bytes: Option<Bound<'_, PyBytes>>,
             field_float64: f64,
             field_uint32: u32,
             field_string: &str,
             field_duration_array: Option<Vec<Duration>>,
             field_time_array: Option<Vec<Timestamp>>,
             field_boolean_array: Option<Vec<bool>>,
             field_bytes_array: Option<Bound<'_, PyBytes>>,
             field_float64_array: Option<Vec<f64>>,
             field_uint32_array: Option<Vec<u32>>,
             field_string_array: Option<Vec<&str>>,
             field_duration_fixed_array: Option<Vec<Duration>>,
             field_time_fixed_array: Option<Vec<Timestamp>>,
             field_boolean_fixed_array: Option<Vec<bool>>,
             field_bytes_fixed_array: Option<Bound<'_, PyBytes>>,
             field_float64_fixed_array: Option<Vec<f64>>,
             field_uint32_fixed_array: Option<Vec<u32>>,
             field_string_fixed_array: Option<Vec<&str>>,
             field_enum: ExampleMessageExampleEnum,
             field_enum_array: Option<Vec<ExampleMessageExampleEnum>>,
             field_nested: Option<NestedMessage>,
             field_nested_array: Option<Vec<NestedMessage>>,
         ) -> Self {
             Self(foxglove::schemas::ExampleMessage {
                 field_duration: field_duration.map(Into::into),
                 field_time: field_time.map(Into::into),
                 field_boolean,
                 field_bytes: field_bytes.map(|x| Bytes::copy_from_slice(x.as_bytes())).unwrap_or_default(),
                 field_float64,
                 field_uint32,
                 field_string: field_string.to_string(),
                 field_duration_array: field_duration_array.unwrap_or_default().into_iter().map(|x| x.into()).collect(),
                 field_time_array: field_time_array.unwrap_or_default().into_iter().map(|x| x.into()).collect(),
                 field_boolean_array: field_boolean_array.unwrap_or_default(),
                 field_bytes_array: field_bytes_array.map(|x| Bytes::copy_from_slice(x.as_bytes())).unwrap_or_default(),
                 field_float64_array: field_float64_array.unwrap_or_default(),
                 field_uint32_array: field_uint32_array.unwrap_or_default(),
                 field_string_array: field_string_array.unwrap_or_default().into_iter().map(String::from).collect(),
                 field_duration_fixed_array: field_duration_fixed_array.unwrap_or_default().into_iter().map(|x| x.into()).collect(),
                 field_time_fixed_array: field_time_fixed_array.unwrap_or_default().into_iter().map(|x| x.into()).collect(),
                 field_boolean_fixed_array: field_boolean_fixed_array.unwrap_or_default(),
                 field_bytes_fixed_array: field_bytes_fixed_array.map(|x| Bytes::copy_from_slice(x.as_bytes())).unwrap_or_default(),
                 field_float64_fixed_array: field_float64_fixed_array.unwrap_or_default(),
                 field_uint32_fixed_array: field_uint32_fixed_array.unwrap_or_default(),
                 field_string_fixed_array: field_string_fixed_array.unwrap_or_default().into_iter().map(String::from).collect(),
                 field_enum: field_enum as i32,
                 field_enum_array: field_enum_array.unwrap_or_default().into_iter().map(|x| x as i32).collect(),
                 field_nested: field_nested.map(Into::into),
                 field_nested_array: field_nested_array.unwrap_or_default().into_iter().map(|x| x.into()).collect(),
             })
         }
         fn __repr__(&self) -> String {
             format!(
                 "ExampleMessage(field_duration={:?}, field_time={:?}, field_boolean={:?}, field_bytes={:?}, field_float64={:?}, field_uint32={:?}, field_string={:?}, field_duration_array={:?}, field_time_array={:?}, field_boolean_array={:?}, field_bytes_array={:?}, field_float64_array={:?}, field_uint32_array={:?}, field_string_array={:?}, field_duration_fixed_array={:?}, field_time_fixed_array={:?}, field_boolean_fixed_array={:?}, field_bytes_fixed_array={:?}, field_float64_fixed_array={:?}, field_uint32_fixed_array={:?}, field_string_fixed_array={:?}, field_enum={:?}, field_enum_array={:?}, field_nested={:?}, field_nested_array={:?})",
                 self.0.field_duration,
                 self.0.field_time,
                 self.0.field_boolean,
                 self.0.field_bytes,
                 self.0.field_float64,
                 self.0.field_uint32,
                 self.0.field_string,
                 self.0.field_duration_array,
                 self.0.field_time_array,
                 self.0.field_boolean_array,
                 self.0.field_bytes_array,
                 self.0.field_float64_array,
                 self.0.field_uint32_array,
                 self.0.field_string_array,
                 self.0.field_duration_fixed_array,
                 self.0.field_time_fixed_array,
                 self.0.field_boolean_fixed_array,
                 self.0.field_bytes_fixed_array,
                 self.0.field_float64_fixed_array,
                 self.0.field_uint32_fixed_array,
                 self.0.field_string_fixed_array,
                 self.0.field_enum,
                 self.0.field_enum_array,
                 self.0.field_nested,
                 self.0.field_nested_array,
             )
         }
         /// Returns the ExampleMessage schema.
         #[staticmethod]
         fn get_schema() -> PySchema {
             foxglove::schemas::ExampleMessage::get_schema().unwrap().into()
         }
         /// Encodes the ExampleMessage as protobuf.
         fn encode<'a>(&self, py: Python<'a>) -> Bound<'a, PyBytes> {
             PyBytes::new_with(py, self.0.encoded_len().expect("foxglove schemas provide len"), |mut b: &mut[u8]| {
                 self.0.encode(&mut b).expect("encoding len was provided above");
                 Ok(())
             }).expect("failed to allocate buffer for encoded message")
         }
     }


     impl From<ExampleMessage> for foxglove::schemas::ExampleMessage {
         fn from(value: ExampleMessage) -> Self {
             value.0
         }
     }

     "
    `);
  });
});
